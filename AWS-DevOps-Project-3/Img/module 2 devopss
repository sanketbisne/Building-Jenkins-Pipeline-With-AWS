devops
developers and operations was a completely seperate entity
develops create  code 
that needs to be deployed to the production 
and because of that operations need to be communicate with developers.

operations is a part of IT that manages,configure and deploy software

job is software delivery and running at top performance
so now it happens in thte team rather individually.
---------------------------------------------------------------------------------------------

Issues that DevOps tries to solve:

    Unpredictable deployments
    Mismatched environments (development doesn’t match production)
    Configuration Drift
---------------------------------------------------------------------------------------------

    DevOps Tools: DevOp tools deploy and manage configuration changes to servers.

    Allows for predictable deployments, because it’s an automated script
    Enables Continuous Integration Continuous Deployment (CI/CD) so that new features are automatically deployed with all the required dependencies.

----------------------------------------------------------------------------------------------

    Continuous Integration Continuous Deployment (CI/CD): Tracks the development workflow from testing through production.
 Continuous integration is process flow of testing any change made to your development flow, while continuous deployment tracks those changes through to staging and production systems.
      .
----------------------------------------------------------------------------------------------
CloudFormation: CloudFormation is a tool in AWS for managing, configuring and deploying infrastructure (push code along with the necessary server configurations) 


Programmatic Access

In the AWS console, choose "programmatic access." This allows us to use code to interact with AWS, instead of relying on mouse clicking in the console web pages.
Administrator Access

For IAM access, choose “administrator access.” This is just for initial setup of your account. Afterwards, you’ll want to limit access to only what you need.
Dev and Prod user accounts

In practice, Dev and DevOps members may have separate user accounts for the dev environment as opposed to the production environment. This makes it easier for developers by giving them wider privileges in the dev environment that would normally only be reserved for DevOps members in the production environment.
Access Key ID and Secret Access Keys

Remember not to save these in your code or to check into any repositories. Keep these private to you.

----------------------------------------------------------------------------------------------

CloudFormation

    CloudFormation is a declarative language, not an imperative language.
    CloudFormation handles resource dependencies, so that you don’t have to specify which resource to start up before another. There are cases where you can specify that a resource depends on another resource, but ideally, you’ll let CloudFormation take care of dependencies.
    VPC is the smallest unit of resource.

Glossary

Declarative languages: These languages specify what you want, without requiring you to specify how to get it. An example of a popular declarative language is SQL.

Imperative languages: These languages use statements to change the state of the program.
-------------------------------------------------------------------------------------------------

YAML and JSON

    YAML and JSON file formats are both supported in CloudFormation, but YAML is the industry preferred version that’s used for AWS and other cloud providers (Azure, Google Cloud Platform).

    An important note about YAML files: the whitespace indentation matters! We recommend that you use four white spaces for each indentation.

Glossary in CloudFormation scripts

Name: A name you want to give to the resource (does this have to be unique across all resource types?)

Type: Specifies the actual hardware resource that you’re deploying.

Properties: Specifies configuration options for your resource. Think of these as all the drop down menus and checkbox options that you would see in the AWS console if you were to request the resource manually.

Stack: A stack is a group/collection  of resources. These are the resources that you want to deploy, and that are specified in the YAML file.
Best practices

Coding best practice: Create separate files to organize your code. You can either create separate files for similar resources, or create files for each developer who uses those resources.
Documentation for CloudFormation syntax

You don't need to memorize the code that you need for each resource. You can find sample code in the documentation for CloudFormation for examples of how to write your CloudFormation scripts.
------------------------------------------------------------------------------------------------------
LUCIDCHARTS for cloud diagrams

We’ll use Lucidchart to create cloud diagrams. Other applications that generate diagrams include Visio or Cloudcraft.
------------------------------------------------------------------------------
Virtual Private Cloud (VPC): A virtual private cloud is a pool of networked cloud resources. It can span more than one availability zone.

The equivalent of this would be a data center. However, thanks to availability zones, VPCs can span more than one physical building. This is an amazing feature that protects against real world disasters like electrical failures, fires and similar events. 
------------------------------------------------------------------------------

Load Balancer

    A load balancer takes incoming traffic and distributes it to two or more resources. For example, it can take inbound user requests to access your website, and it can distribute the requests evenly among two or more servers.

    Without a load balancer, having public-facing servers in more than one AZ would mean that users would have to use a different URL to reach each of the AZs. This can be impractical compared to just a single URL.
------------------------------------------------------------------------------
As we were typing the command "aws cloudformation create-stack --stack-name myfirstscript --template-body 
or 
if i want to update the stack i will not anymore type the manual command to update my stack
so we use create.sh script ie we create a file under that we will type the following commands
-------------------------------------------------------------------------------
aws cloudformation create-stack \
--stack-name $1 \
--template-body file://$2 \
--parameters file://$3 \                         -->create stack
--region=ap-south-1
-------------------------------------------------------------------------------------------------
aws cloudformation update-stack \
--stack-name $1 \
--template-body file://$2 \
--parameters file://$3 \                         -->update stack
--region=ap-south-1
------------------------------------------------------------------------------------

make sure regions should be same in update.sh and create.sh      -
as both files also require permissions that is                   -
chmod u+x file.sh(permission denied error) is encountered        -
0-----------------------------------------------------------------------
t's important to note when connecting an Internet Gateway to a VPC, we need to define an additional resource called InternetGatewayAttachment. This attachment references both the VPC and the InternetGateway. Here is the syntax for the following connection:

Type: AWS::EC2::VPCGatewayAttachment
Properties: 
  InternetGatewayId: String
  VpcId: String
  VpnGatewayId: String

### Don't hard-code parameters

Avoid hard coding parameter values. Instead, use a separate parameter file to store parameter values. Note that the parameter file should be in .json format, as .yml format is not yet supported for the parameter file.

Here is an example parameters file from network-parameters.json which is holding key-value pairs for the Environment & VpcCiIDR.

[
    {
        "ParameterKey": "EnvironmentName",
        "ParameterValue": "UdacityProject"
    },
    {
        "ParameterKey": "VpcCIDR",
        "ParameterValue": "10.0.0.0/16"
    }
]


#### Setting Parameters

Parameters should be declared above your Resources:

Parameters:
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
Resources:

and should follow the general format of:

Parameters:
  ParameterLogicalID:
    Type: DataType
    ParameterProperty: value

Here we set the EnvironmentName parameter in our sample code from the video:

Parameters:
    EnvironmentName:
        Description: An Environment name that will be prefixed to resources
        Type: String

#### Default Parameters

You can also provide default values for parameters in case one was not passed in. In this example you can see that VpcCIDR has a default value of 10.0.0.0/16.

Parameters:
    EnvironmentName:
        Description: An Environment name that will be prefixed to resources
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Our Preferred way of writing CloudFormation Scripts is in YAML Format, like this:

Parameters:
  # Parameters are entirely optional.
  # but using them will make your cloudformation templates more reusable
Resources:
  ResourceName:
    ResourceType
    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Let’s discuss the Parameters and Resources.
A. Parameters section of our CloudFormation script

Any named parameters in the Parameters section of our CloudFormation script will need to have a matching value in a separate, Parameter file, which is in JSON format. A sample JSON-formatted Parameter file is:

[
    {
        "ParameterKey": "EnvironmentName",
        "ParameterValue": "UdacityProject"
    }
]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ha-ving this additional file with actual parameter values, allows you to change data that is used by your CloudFormation script without the risk of having to modify the script directly and possibly introduce a typo or some sort of logical error.
B. Resources section of our CloudFormation script

This is actually the only mandatory section of our script because this is where we actually build resources, such as Servers, Gateways, VPN Connections and more.

Each resource you add to this section will have the same sections as in our example below.

    A Name which can be anything that makes sense to you
    A Type which tells CloudFormation which kind of resource it is
    Some additional properties that are specific to the resource, which you can find in the CloudFormation documentation.

My_IAM_Roles_for_my_EC2_Web_Server:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Connecting VPC's & Internet Gateways

It's important to note when connecting an Internet Gateway to a VPC, we need to define an additional resource called InternetGatewayAttachment. This attachment references both the VPC and the InternetGateway. Here is the syntax for the following connection:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Type: AWS::EC2::VPCGatewayAttachment
Properties: 
  InternetGatewayId: String
  VpcId: String
  VpnGatewayId: String
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Don't hard-code parameters
--------
Avoid hard coding parameter values. Instead, use a separate parameter file to store parameter values. Note that the parameter file should be in .json format, as .yml format is not yet supported for the parameter file.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Here is an example parameters file from network-parameters.json which is holding key-value pairs for the Environment & VpcCiIDR.

[
    {
        "ParameterKey": "EnvironmentName",
        "ParameterValue": "UdacityProject"
    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------},
    {
        "ParameterKey": "VpcCIDR",
        "ParameterValue": "10.0.0.0/16"
    }
]

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Setting Parameters
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Parameters should be declared above your Resources:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Parameters:
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
Resources:

and should follow the general format of:

Parameters:
  ParameterLogicalID:
    Type: DataType
    ParameterProperty: value

Here we set the EnvironmentName parameter in our sample code from the video:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Parameters:
    EnvironmentName:
        Description: An Environment name that will be prefixed to resources
        Type: String

Default Parameters

You can also provide default values for parameters in case one was not passed in. In this example you can see that VpcCIDR has a default value of 10.0.0.0/16.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Parameters:
    EnvironmentName:
        Description: An Environment name that will be prefixed to resources
        Type: String
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Calling CloudFormation
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
When calling AWS CloudFormation, you’ll pass in the name of the .yml file as well as the name of the parameter file as parameters to the CloudFormation call.

For example:

aws cloudformation create-stack --stack-name MyStack --template-body file://MyCloudformationScript.yml  --parameters file://MyEnvironmentVariables.json 

    Note that CloudFormation knows to create the resources in order, based on their dependencies (VPC and InternetGateway, before creating 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#### Security Groups

The following is the syntax required to create a SecurityGroup:

Type: AWS::EC2::SecurityGroup
Properties: 
  GroupDescription: String
  GroupName: String
  SecurityGroupEgress: 
    - Egress
  SecurityGroupIngress: 
    - Ingress
  Tags: 
    - Tag
  VpcId: String

Although they are not required, the SecurityGroupEgress and SecurityGroupIngress property rules are the most critical to the SecurityGroup as it defines where the traffic will go. While SecurityGroupEgress defines outbound traffic, SecurityGroupIngress defines the inbound traffic.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#### Ingress rules and egress rules

    Ingress rules are for inbound traffic, and egress rules are for outbound traffic.
    Ingress rules restrict or allow traffic trying to reach our resources on specific ports.
    Egress rules restrict or allow traffic originating from our server -- typically we are ok allowing all outbound traffic without restrictions as this doesn’t pose a risk for a security breach.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
we need to create 2 files and remember parameters name should be same else results is RollBAck complete problems!
demoservers.yml


Description: >
    Your Name / sanket bisne 2019
Parameters:
  EnvironmentName:
      Description: Single Parameter that we are passing with the env name.
      Type: String
Resources:

demoservers.json

[
    {
        "ParameterKey": "EnvironmentName",
        "ParameterValue": "UdacityProject"
    }
]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
then comes Security Groups
he following is the syntax required to create a SecurityGroup:

Type: AWS::EC2::SecurityGroup
Properties: 
  GroupDescription: String
  GroupName: String
  SecurityGroupEgress: 
    - Egress
  SecurityGroupIngress: 
    - Ingress
  Tags: 
    - Tag
  VpcId: String

Although they are not required, the SecurityGroupEgress and SecurityGroupIngress property rules are the most critical to the SecurityGroup as it defines where the traffic will go. While SecurityGroupEgress defines outbound traffic, SecurityGroupIngress defines the inbound traffic.


Ingress rules and egress rules

    Ingress rules are for inbound traffic, and egress rules are for outbound traffic.
    Ingress rules restrict or allow traffic trying to reach our resources on specific ports.
    Egress rules restrict or allow traffic originating from our server -- typically we are ok allowing all outbound traffic without restrictions as this doesn’t pose a risk for a security breach.


---------------------------------------------------------------------------------------------

